---

### apps-atom Variables
# 
# Overview: Configure the preferences and packages that Atom uses
#
# Description:
#   Define your preferences for Atom below, default variables have been set but are set to be as neutral and nondestructive as possible
# 
###

# Core Configuration
# =============================================================================

### Install Beta
# Todo: Add option to install Atom Beta or Atom and Atom Beta



  # Install Packages File
  # - { file: 'files/packages.txt' }

### Install Packages
#
# Playbook attribute: install
# Required: no
# Type: array
# Default: false
# command aliases for reference: i
# Description:
#   Runs `apm uninstall {{ uninstall.packages }} {{ unistall.hard }} {{ uninstall.dev }}`
#   Command --help:
#     Usage: apm install [<package_name>...]
#        apm install <package_name>@<package_version>
#        apm install <git_remote>
#        apm install <github_username>/<github_project>
#        apm install --packages-file my-packages.txt
#        apm i (with any of the previous argument usage)
#
#     Install the given Atom package to ~/.atom/packages/<package_name>.
# 
#     If no package name is given then all the dependencies in the package.json file are installed to the node_modules folder in the current working directory.
# 
#     A packages file can be specified that is a newline separated list of package names to install with optional versions using the `package-name@version` syntax.
#
#     Options:
#       --check           Check that native build tools are installed                            [boolean]
#       --verbose         Show verbose debug information                        [boolean] [default: false]
#       --packages-file   A text file containing the packages to install                          [string]
#       --production      Do not install dev dependencies                                        [boolean]
#       -c, --compatible  Only install packages/themes compatible with this Atom version          [string]
#       -h, --help        Print this usage message
#       -s, --silent      Set the npm log level to silent                                        [boolean]
#       -q, --quiet       Set the npm log level to warn                                          [boolean]
#
#        Prefix an option with `no-` to set it to false such as --no-color to disable colored output.
# check: true, verbose: true, parckages-file: 'some file', production: true, compatible: true
#
# Note:
#   1. You can specify each of the options above in your arrays but some of them don't make sense in the context of ansible unless you're logging output since setting something like --verbose won't be written to the shell when Ansible is run.
#   2. 'package' and 'file' are mutually exclusive, putting both in the same dictionary item will throw an error and will not install.
# 
# Examples:
# - some package'}
# - another package', check: true, verbose: true, production: true, compatible: true, silent: true, quiet: true }

packages:

  # Install Aligner and related packages
  - aligner testing a long string
  - aligner-css
  - aligner-javascript

  # Autocomplete+
  - autocomplete-plus

  # Linter
  - linter
  - linter-ui-default

  # Languages
  - language-javascript-jsx

  # Misc Packages
  - atom-ide-ui
  - busy-signal
  - dash
  - docblockr
  - intentions
  - project-manager
  - script
  - todo-show

  # Syntax Themes
  - an-old-hope-syntax
  - br4ckets-light

  # UI Themes

  # Git Packages
  # TODO: Move to Git role
  - git-plus
  - git-time-machine
  - tree-view-git-status

  # Ansible Packages
  # TODO: Move to Ansible role
  - ansible-galaxy-plus
  - ansible-snippets
  - autocomplete-ansible
  - language-ansible
  - linter-ansible-linting

  # Front-End Packages
  # TODO: Move to Front-End role
  - aligner-coffeescript
  - aligner-scss
  - aligner-stylus
  - javascript-snippets
  - linter-tidy

  # MySQL Packages
  # TODO: Move to MySQL role
  - atom-mysql-snippets
  - language-sql-mysql

  # PHP Packages
  # TODO: Move to PHP role
  - aligner-php
  - linter-php
  - php-debug

  # Ruby Packages
  # TODO: Move to Ruby role
  - aligner-ruby

  # Python Packages
  # TODO: Move to Python Role
  - aligner-python

### Uninstall Packages
#
# Playbook attribute: uninstall
# Required: no
# Type: array
# Default: false
# command aliases for reference: deinstall, delete, erase, remove and rm 
# Description:
#   Runs `apm uninstall {{ uninstall.packages }} {{ unistall.hard }} {{ uninstall.dev }}`
#   Command --help:
#     Usage: apm uninstall <package_name>...
#
#     Delete the installed package(s) from the ~/.atom/packages directory.
#     
#     Options:
#       --hard      Uninstall from ~/.atom/packages and ~/.atom/dev/packages [boolean]
#       -d, --dev   Uninstall from ~/.atom/dev/packages                      [boolean]
# 
# uninstall:
#   - { enable: true, packages: "some package", hard: true, dev: false }


# Less Common Settings
# =============================================================================


### clean
#
# Playbook attribute: clean
# Required: no
# Type: boolean
# Default: false
# Description:
#   Runs `apm clean`
#   Command --help:
#     Deletes all packages in the node_modules folder that are not referenced as a dependency in the package.json file. 
#       
# Note: This command is used for developing Atom packages and has been added for completeness, it's not something you normally use.
#
# Syntax:
#
# ---
# clean: true
# ---
#

### config
#
# Playbook attribute: config
# Required: no
# Type: array
# Default: false
# Description:
#   Runs `apm config {{ config.command }} {{ config.key }} {{ config.value }}`
#   Command --help:
#     Usage: apm config set <key> <value>
#            apm config get <key>
#            apm config delete <key>
#            apm config list
#            apm config edit
#
# Notes:
#   1. While you can execute set, get, delete and list only set and delete make sense in the context of ansible.
#        get and list will not print their output to the shell so adding them is superflious.
#   2. Trying to use edit will be skipped altogether to prevent vim (or whatever editor is set) from trying to hijack the shell.
#
# Syntax:
#
# ---
# config: 
#   - { command: 'set', key: 'some key', value: 'some value' }
#   - { command: 'delete', key: 'some key'}
# ---
#

### dedupe
#
# Playbook attribute: dedupe
# Required: no
# Type: list
# Default: false
# Description:
#   Runs `apm dedupe {{ dedupe.packages }}`
#   Command --help:
#     Usage: apm dedupe [<package_name>...]
#
#     Reduce duplication in the node_modules folder in the current directory.
#
#     This command is experimental.
#
# Note:
#   It appears that you can run this without specifying a package to presumably dedupe all but this has not been tested.
#
# Syntax:
# ---
# dedupe:
#   -
#   - 'some package'
# ---
#
